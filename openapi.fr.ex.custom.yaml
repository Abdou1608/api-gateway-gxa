openapi: 3.0.3
info:
  title: SOAP REST Gateway API
  version: 1.0.1
  description: Spécification nettoyée (corruption retirée). À étendre progressivement.
servers:
  - url: /
paths:
  /api/health:
    get:
      summary: Health check (Express)
      tags: [infrastructure]
      security: []
      responses:
        '200':
          description: Statut OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /api/login:
    post:
      summary: Authentification utilisateur
      tags: [auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginInput'
      responses:
        '200':
          description: Contexte de sécurité retourné
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/logout:
    post:
      summary: Invalidation de la session
      tags: [auth]
      security: []
      responses:
        '200':
          description: Déconnexion effectuée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardSuccess'
        '401':
          description: Session absente ou expirée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/profile:
    get:
      summary: Profil utilisateur
      tags: [auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Informations du profil
          content:
            application/json:
              schema:
                type: object
                properties:
                  login: { type: string }
                  role: { type: string }
                  email: { type: string }
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/liste_des_contrats:
    post:
      summary: Liste des contrats
      tags: [contrats]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/liste_des_contratsInput'
      responses:
        '200':
          description: Liste renvoyée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContratSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /api/Tiers_Search:
    post:
      summary: Recherche de tiers
      tags: [tiers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tiers_searchInput'
      responses:
        '200':
          description: Résultats de la recherche
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TiersSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /api/create_contrat:
    post:
      summary: Création d'un contrat
      tags: [contrats]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_contratInput'
      responses:
        '200':
          description: Contrat créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContratSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /api/detail_contrat:
    post:
      summary: Détail d'un contrat
      tags: [contrats]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/detail_contratInput'
      responses:
        '200':
          description: Détail complet
          content:
            application/json:
              schema:
                type: object
                properties:
                  contrat:
                    $ref: '#/components/schemas/ContratSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /api/create_quittance:
    post:
      summary: Création de quittance
      tags: [quittances]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_quittanceInput'
      responses:
        '200':
          description: Quittance créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuittanceSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/create_reglement:
    post:
      summary: Création de règlement
      tags: [reglements]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_reglementInput'
      responses:
        '200':
          description: Règlement enregistré
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReglementSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/create:
    post:
      summary: Création de projet
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_createInput'
      responses:
        '200':
          description: Projet créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/detail:
    post:
      summary: Détail projet
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_detailInput'
      responses:
        '200':
          description: Détail du projet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/add-offer:
    post:
      summary: Ajout d'offre sur projet
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_addofferInput'
      responses:
        '200':
          description: Offre ajoutée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/delete-offer:
    post:
      summary: Suppression d'offre du projet
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_deleteofferInput'
      responses:
        '200':
          description: Offre supprimée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardSuccess'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/list-items:
    post:
      summary: Liste des éléments du projet
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_listitemsInput'
      responses:
        '200':
          description: Liste d'items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/offer-list-items:
    post:
      summary: Liste des offres du projet
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_offerlistitemsInput'
      responses:
        '200':
          description: Liste d'offres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/update:
    post:
      summary: Mise à jour d'un projet
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_updateInput'
      responses:
        '200':
          description: Projet mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
  /api/projects/validate-offer:
    post:
      summary: Validation d'offre
      tags: [projects]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projects_project_validateofferInput'
      responses:
        '200':
          description: Offre validée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferSummary'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur interne / Faute SOAP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapFaultError'
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    StandardSuccess:
      type: object
      properties:
        ok:
          type: boolean
          example: true
      required: [ok]
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        details:
          type: object
      required: [error]
    SoapFaultError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            details:
              type: object
              properties:
                faultcode: { type: string }
                state: { type: string }
                errorCode: { type: string }
    LoginResponse:
      type: object
      properties:
        BasSecurityContext:
          type: object
          properties:
            _SessionId: { type: string }
            _IsAuthenticated: { type: boolean }
      required: [BasSecurityContext]
    ContratSummary:
      type: object
      properties:
        id: { type: number }
        produit: { type: string }
        effet: { type: string, format: date-time }
        statut: { type: string }
      required: [id, produit, effet]
    TiersSummary:
      type: object
      properties:
        reference: { type: string }
        typetiers: { type: number }
        libelle: { type: string }
      required: [reference, typetiers]
    QuittanceSummary:
      type: object
      properties:
        id: { type: number }
        contrat: { type: number }
        montant: { type: number }
        devise: { type: string }
        effet: { type: string, format: date-time }
      required: [id, contrat, montant]
    ReglementSummary:
      type: object
      properties:
        id: { type: number }
        typeoperation: { type: string }
        montant: { type: number }
        devise: { type: string }
        date: { type: string, format: date-time }
      required: [id, typeoperation, montant]
    OfferSummary:
      type: object
      properties:
        idoffer: { type: number }
        produit: { type: string }
        effet: { type: string, format: date-time }
      required: [idoffer, produit]
    ProjectSummary:
      type: object
      properties:
        idproj: { type: number }
        libelle: { type: string }
        username: { type: string }
      required: [idproj]
    ValidationErrorDetail:
      type: object
      properties:
        champ: { type: string, description: Nom du champ en erreur }
        message: { type: string, description: Raison de l’erreur }
      required: [champ, message]
    ValidationErrorResponse:
      type: object
      properties:
        erreur: { type: string, example: Le corps de la requête est invalide. }
        details:
          type: array
          items:
            $ref: '#/components/schemas/ValidationErrorDetail'
      required: [erreur, details]
    # Input Schemas
    loginInput:
      type: object
      properties:
        logon: { type: string }
        password: { type: string }
        Domain: { type: string }
      required: [logon, password, Domain]
    logoutInput:
      type: object
      properties:
        BasSecurityContext: { type: string }
      required: [BasSecurityContext]
    profileInput:
      type: object
      properties:
        domain: { type: string }
        email: { type: string }
        login: { type: string }
        dossier: { type: string }
      required: [domain, email, login]
    liste_des_contratsInput:
      type: object
      properties:
        reference: { type: string }
        detailorigine: { type: boolean }
      required: [reference]
    detail_contratInput:
      type: object
      properties:
        contrat: { type: number }
        Allpieces: { type: boolean }
        DetailAdh: { type: boolean }
        Garanties: { type: boolean }
        Extensions: { type: boolean }
        infosCieProd: { type: boolean }
      required: [contrat, Allpieces, DetailAdh, Garanties, Extensions, infosCieProd]
    tiers_searchInput:
      type: object
      properties:
        reference: { type: string }
        typetiers: { type: number }
        detailorigine: { type: boolean }
      required: [reference]
    create_contratInput:
      type: object
      properties:
        dossier: { type: number }
        produit: { type: string }
        Effet: { type: string, format: date-time }
      required: [dossier, produit, Effet]
    create_quittanceInput:
      type: object
      properties:
        contrat: { type: number }
        piece: { type: number }
        bordereau: { type: number }
        data: { type: string }
      required: [contrat, piece, bordereau, data]
    create_reglementInput:
      type: object
      properties:
        typeoperation: { type: string }
        typeenc: { type: string }
        targetkind: { type: string }
        targetqintid: { type: string }
        montant: { type: number }
        devise: { type: string }
        date: { type: string, format: date-time }
        dateff: { type: string, format: date-time }
        reference: { type: string }
        tierspayeur: { type: string }
      required: [typeoperation, typeenc, targetkind, montant, devise]
    detail_produitInput:
      type: object
      properties:
        code: { type: string }
        clauses: { type: boolean }
      required: [code]
    detail_quittanceInput:
      type: object
      properties:
        quittance: { type: number }
        details: { type: boolean }
        garanties: { type: boolean }
        addinfospqg: { type: boolean }
        intervenants: { type: boolean }
        addinfosqint: { type: boolean }
      required: [quittance]
    detail_tierInput:
      type: object
      properties:
        Dossier: { type: number }
        Composition: { type: boolean }
        ListeEntites: { type: string }
        Extensions: { type: boolean }
      required: [Dossier]
    liste_des_contrats_d_un_tierInput:
      type: object
      properties:
        dossier: { type: number }
        IncludeAll: { type: boolean }
      required: [dossier, IncludeAll]
    liste_des_produitsInput:
      type: object
      properties: {}
    liste_des_quittancesInput:
      type: object
      properties:
        contrat: { type: number }
    update_piece_contratInput:
      type: object
      properties:
        contrat: { type: number }
        produit: { type: string }
        Effet: { type: string, format: date-time }
      required: [contrat, produit, Effet]
    projects_project_addofferInput:
      type: object
      properties:
        idproj: { type: number }
        produit: { type: string }
        user: { type: string }
        resutXML: { type: boolean }
      required: [idproj, produit]
    projects_project_createInput:
      type: object
      properties:
        dossier: { type: number }
        contrat: { type: number }
        produit: { type: string }
        username: { type: string }
        libelle: { type: string }
        resutXML: { type: boolean }
      required: [dossier, contrat, produit]
    projects_project_deleteofferInput:
      type: object
      properties:
        idproj: { type: number }
        idoffer: { type: number }
      required: [idproj, idoffer]
    projects_project_detailInput:
      type: object
      properties:
        dproj: { type: number }
      required: [dproj]
    projects_project_listitemsInput:
      type: object
      properties:
        dossier: { type: number }
      required: [dossier]
    projects_project_offerlistitemsInput:
      type: object
      properties:
        idproj: { type: number }
      required: [idproj]
    projects_project_updateInput:
      type: object
      properties:
        idproj: { type: number }
        username: { type: string }
        libelle: { type: string }
        resutXML: { type: boolean }
      required: [idproj]
    projects_project_validateofferInput:
      type: object
      properties:
        idproj: { type: number }
        idoffer: { type: number }
        effet: { type: string, format: date-time }
        Avenant: { type: boolean }
      required: [idproj, idoffer]
