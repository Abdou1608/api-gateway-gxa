"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.api_create_contratValidator = exports.contObjectSchema = void 0;
const zod_1 = require("zod");
// Schémas internes avec messages personnalisés
exports.contObjectSchema = zod_1.z.object({
    numcont: zod_1.z.any().optional().nullable(),
    numtiers: zod_1.z.any().optional().nullable(),
    frac: zod_1.z.any().optional().nullable(),
    echpjj: zod_1.z.any().optional().nullable(),
    echpmm: zod_1.z.any().optional().nullable(),
    intitule: zod_1.z.any().optional().nullable(),
    affnouv: zod_1.z.any().optional().nullable(),
    tacite: zod_1.z.any().optional().nullable(),
    prelev: zod_1.z.any().optional().nullable(),
    prelbank: zod_1.z.any().optional().nullable(),
    jourp: zod_1.z.any().optional().nullable(),
    querab: zod_1.z.any().optional().nullable(),
    realis: zod_1.z.any().optional().nullable(),
    apport1: zod_1.z.any().optional().nullable().refine(val => val !== undefined, { message: "Le champ apport1 est obligatoire." }),
    apport2: zod_1.z.any().optional().nullable(),
    tauxrea: zod_1.z.any().optional().nullable(),
    tauxap1: zod_1.z.any().optional().nullable(),
    tauxap2: zod_1.z.any().optional().nullable(),
    gestionn: zod_1.z.any().optional().nullable(),
    portef: zod_1.z.any().optional().nullable(),
    remplace: zod_1.z.any().optional().nullable(),
    remppar: zod_1.z.any().optional().nullable(),
    derpiece: zod_1.z.any().optional().nullable(),
    memo: zod_1.z.any().optional().nullable(),
    ext: zod_1.z.any().optional().nullable(),
    primann: zod_1.z.any().optional().nullable(),
    primann1: zod_1.z.any().optional().nullable(),
    commann: zod_1.z.any().optional().nullable(),
    commann1: zod_1.z.any().optional().nullable(),
    totann: zod_1.z.any().optional().nullable(),
    totann1: zod_1.z.any().optional().nullable(),
    dateresi: zod_1.z.any().optional().nullable(),
    debcours: zod_1.z.any().optional().nullable(),
    fincours: zod_1.z.any().optional().nullable(),
    debsuiv: zod_1.z.any().optional().nullable(),
    finsuiv: zod_1.z.any().optional().nullable(),
    debann: zod_1.z.any().optional().nullable(),
    finann: zod_1.z.any().optional().nullable(),
    nbsin: zod_1.z.any().optional().nullable(),
    impaye: zod_1.z.any().optional().nullable(),
    impaye1: zod_1.z.any().optional().nullable(),
    acompte: zod_1.z.any().optional().nullable(),
    acompte1: zod_1.z.any().optional().nullable(),
    netimp: zod_1.z.any().optional().nullable(),
    netimp1: zod_1.z.any().optional().nullable(),
    lima: zod_1.z.any().optional().nullable(),
    retrorea: zod_1.z.any().optional().nullable(),
    retroap1: zod_1.z.any().optional().nullable(),
    retroap2: zod_1.z.any().optional().nullable(),
    kprretro: zod_1.z.any().optional().nullable(),
    kprretem: zod_1.z.any().optional().nullable(),
    retroemi: zod_1.z.any().optional().nullable(),
    datdermo: zod_1.z.any().optional().nullable(),
    modifpar: zod_1.z.any().optional().nullable(),
    ole: zod_1.z.any().optional().nullable(),
    txcomm: zod_1.z.any().optional().nullable(),
    comges: zod_1.z.any().optional().nullable(),
    polinter: zod_1.z.any().optional().nullable(),
    polrefus: zod_1.z.any().optional().nullable(),
    modrev: zod_1.z.any().optional().nullable(),
    sansquit: zod_1.z.any().optional().nullable(),
    duree: zod_1.z.any().optional().nullable(),
    modegest: zod_1.z.any().optional().nullable(),
    echu: zod_1.z.any().optional().nullable(),
    echeance: zod_1.z.any().optional().nullable(),
    ddebpiec: zod_1.z.any().optional().nullable(),
    dfinpiec: zod_1.z.any().optional().nullable(),
    hono: zod_1.z.any().optional().nullable(),
    hono1: zod_1.z.any().optional().nullable(),
    frprel: zod_1.z.any().optional().nullable(),
    frprel1: zod_1.z.any().optional().nullable(),
    datereal: zod_1.z.any().optional().nullable(),
    histo: zod_1.z.any().optional().nullable(),
    typretrr: zod_1.z.any().optional().nullable(),
    typretr1: zod_1.z.any().optional().nullable(),
    typretr2: zod_1.z.any().optional().nullable(),
    ptini: zod_1.z.any().optional().nullable(),
    ptini1: zod_1.z.any().optional().nullable(),
    pnini: zod_1.z.any().optional().nullable(),
    pnini1: zod_1.z.any().optional().nullable(),
    comini: zod_1.z.any().optional().nullable(),
    comini1: zod_1.z.any().optional().nullable(),
    agelimit: zod_1.z.any().optional().nullable(),
    fiscal: zod_1.z.any().optional().nullable(),
    numproj: zod_1.z.any().optional().nullable(),
    propproj: zod_1.z.any().optional().nullable(),
    archive: zod_1.z.any().optional().nullable(),
    indic: zod_1.z.any().optional().nullable(),
    nonepur: zod_1.z.any().optional().nullable(),
    mandat: zod_1.z.any().optional().nullable(),
    prevsusp: zod_1.z.any().optional().nullable(),
    prevresi: zod_1.z.any().optional().nullable(),
    fvahom: zod_1.z.any().optional().nullable(),
    daterefindice: zod_1.z.any().optional().nullable(),
    typesignature: zod_1.z.any().optional().nullable(),
});
const OripieceCode = zod_1.z.string();
const SitpieceCode = zod_1.z.string();
const FinpieceCode = zod_1.z.string();
const piecObjectSchema = zod_1.z.object({
    contrat: zod_1.z.number().describe("Le champ contrat est obligatoire."),
    piece: zod_1.z.number().describe("Le champ piece est obligatoire."),
    adhprin: zod_1.z.number().optional().nullable(),
    codeprod: zod_1.z.string().optional().nullable(),
    oripiece: OripieceCode.optional().nullable(),
    effet: zod_1.z.string().optional().nullable(),
    sitpiece: SitpieceCode.optional().nullable(),
    datesit: zod_1.z.string().optional().nullable(),
    suspens: zod_1.z.string().optional().nullable(),
    finpiece: FinpieceCode.optional().nullable(),
    datefin: zod_1.z.string().optional().nullable(),
    entite: zod_1.z.number().optional().nullable(),
    ciemaj: zod_1.z.number().optional().nullable(),
    navenant: zod_1.z.string().optional().nullable(),
    motif: zod_1.z.string().optional().nullable(),
    globalor: zod_1.z.string().optional().nullable(),
    globalte: zod_1.z.string().optional().nullable(),
    preavis: zod_1.z.number().optional().nullable(),
    memo: zod_1.z.string().optional().nullable(),
    coeffcom: zod_1.z.number().optional().nullable(),
    centre: zod_1.z.string().optional().nullable(),
    heure: zod_1.z.string().optional().nullable(),
    datemed: zod_1.z.string().optional().nullable(),
    datcreat: zod_1.z.string().optional().nullable(),
    cg: zod_1.z.string().optional().nullable(),
}).strict().describe("Champs non attendus dans PIEC.");
const poliObjectSchema = zod_1.z.object({
    Cie: zod_1.z.any().describe("Le champ Cie est obligatoire."),
    Contrat: zod_1.z.any().describe("Le champ Contrat est obligatoire."),
    Piece: zod_1.z.any().describe("Le champ Piece est obligatoire."),
    Police: zod_1.z.any().describe("Le champ Police est obligatoire."),
    // Champs facultatifs
    Cieprime: zod_1.z.any().optional().nullable(),
    Cietaxes: zod_1.z.any().optional().nullable(),
    Commsup: zod_1.z.any().optional().nullable(),
    Coutpol: zod_1.z.any().optional().nullable(),
    Coutpol1: zod_1.z.any().optional().nullable(),
    external_cie_nomcie: zod_1.z.any().optional().nullable(),
    PolGroupe: zod_1.z.any().optional().nullable(),
    Role: zod_1.z.any().optional().nullable(),
    Tauxcn: zod_1.z.any().optional().nullable(),
    Tauxcom: zod_1.z.any().optional().nullable(),
    Tauxcout: zod_1.z.any().optional().nullable(),
    Tauxpart: zod_1.z.any().optional().nullable(),
});
const contModelSchema = zod_1.z.object({
    CONT: exports.contObjectSchema.optional().nullable().refine(v => v !== undefined, { message: "Objet CONT requis dans data" }),
    PIEC: piecObjectSchema.optional().nullable().refine(v => v !== undefined, { message: "Objet PIEC requis dans data" }),
    poli: poliObjectSchema.optional().nullable().refine(v => v !== undefined, { message: "Objet poli requis dans data" }),
});
exports.api_create_contratValidator = zod_1.z.object({
    dossier: zod_1.z.number().describe("Le dossier doit être un nombre"),
    produit: zod_1.z.string().min(1, "champ requis"),
    Effet: zod_1.z.preprocess(val => (typeof val === "string" || val instanceof Date) ? new Date(val) : val, zod_1.z.date().describe("Date d'effet invalide")),
    défaut: zod_1.z.any(),
    pièce: zod_1.z.any(),
    data: contModelSchema,
    BasSecurityContext: zod_1.z.object({
        _SessionId: zod_1.z.string().min(1, "champ SessionId est requis"),
    }),
});
