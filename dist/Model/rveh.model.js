"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RvehTagMap = exports.RvehFieldMap = exports.RisaTagMap = void 0;
exports.RisaTagMap = {
    risque: 'risque',
    numtiers: 'numtiers',
    appel: 'appel',
    ext: 'ext',
    images: 'images',
    memo: 'memo',
    identifi: 'identifi',
    zone: 'zone',
    tarif: 'tarif',
    origine: 'origine',
    dateori: 'dateori',
    centre: 'centre',
    datetar: 'datetar',
    datebia: 'datebia',
    ole: 'ole'
};
exports.RvehFieldMap = {
    risque: 'N° ordre',
    numtiers: 'N° tiers',
    immat: 'N° immatriculation',
    datecg: 'date carte grise',
    datecirc: 'date de Mise en circulation',
    genre: 'genre',
    marque: 'Marque',
    type: 'Type',
    modele: 'Modèle',
    symbmine: 'Type mine',
    nserie: 'N° dans la Série du Type',
    carross: 'Carrosserie',
    energie: 'Energie',
    pfiscale: 'Cv fiscaux',
    puissan: 'Puissance',
    places: 'Places assises',
    poidvide: 'Poids à vide',
    poidstr: 'Poids total Roulant',
    valneuf: 'Valeur à neuf',
    valneuf1: 'Valeur à neuf (ISO 4217 currency code)',
    codegta: 'code GTA',
    groupe: 'groupe',
    classe: 'classe',
    couleur: 'couleur principale',
    alarme: 'avec alarme',
    marquage: 'avec marquage',
    antivol: 'avec antivol',
    abs: 'Avec ABS',
    remorque: 'remorque +750kg (ou side)',
    numremor: 'immatriculation remorque',
    marquere: 'marque de remorque',
    anneerem: 'année de la remorque',
    vanrem: 'valeur de la remorque',
    vanrem1: 'valeur de la remorque (ISO 4217 currency code)',
    ptcrem: 'Poids TC remorque',
    garage: 'lieu habituel de garage',
    cpgar: 'Code postal garage',
    typegar: 'type de garage',
    zone: 'zone',
    szone: 'sous-zone',
    nkm: 'nombre de kilometres',
    conttech: 'dernier controle technique',
    pct: 'prochain controle technique',
    orgleas: 'organisme de leasing',
    dateprtr: 'date de la 1iere traite',
    datdertr: 'date de la derniere traite',
    nbtraite: 'nombre de traites',
    usage: 'usage',
    crm: 'Coeff. Réduction/Majoration',
    datecrm: 'CRM à la date du',
    crmmaxi: 'date du CRM minimum',
    crmdepui: 'CRM sans interruption depuis',
    joker: 'Sinistre resp. non imputé CRM',
};
exports.RvehTagMap = Object.entries(exports.RvehFieldMap).reduce((acc, [key]) => {
    acc[key] = key;
    return acc;
}, {});
